@page "/fetchdata"
@using BlazorLoggerWrappers.Shared
@inject HttpClient Http

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.  It also demonstrates logging to the local console and the server.</p>

<p>Each refresh of this page will make a server call, which then logs the call to the server side logger.</p>

<p>Both the client logger and the server side logger share a common interface, so objects that write to the log can be shared between the two.</p>

<button @onclick=WriteTextToLog>Write this text to the Console log</button>
<input @bind=logText />

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Inject] IMessageLogger MsgLogger { get; set; }

    private WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
    }


    private string logText { get; set; } = "log text to write";

    protected override void OnInitialized()
    {
        MsgLogger.SetLoggerType<Index>();
        MsgLogger.Debug("Initialized Index");
    }

    private void WriteTextToLog()
    {
        MsgLogger.Debug(logText);
    }
}
